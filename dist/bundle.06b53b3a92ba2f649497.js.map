{"version":3,"sources":["webpack://cv-maker/./src/components/header/EditContactInfo.js","webpack://cv-maker/./src/components/header/ContactInfo.js","webpack://cv-maker/./src/components/header/TitleSection.js","webpack://cv-maker/./src/components/header/Header.js","webpack://cv-maker/./src/helpers/handleFocus.js","webpack://cv-maker/./src/helpers/localStorage.js","webpack://cv-maker/./src/helpers/useOutsideClick.js"],"names":["InputField","props","useState","stateValue","newValue","setNewValue","ref","useRef","useOutsideClick","stateUpdater","className","htmlFor","id","label","onChange","e","target","value","pattern","inputPattern","required","title","inputTitle","type","inputType","name","info","contactInfo","formIsValid","setFormValidation","phone","phoneNum","setPhoneNum","email","setEmail","website","setWebsite","address","setAddress","setFormOpen","onSubmit","preventDefault","setContactInfo","onFocus","handleFocus","defaultInfo","RenderContactInfo","onClick","globalEditingMode","InfoItem","infoData","icon","formOpen","getItemsFromStorage","setItemsToStorage","RenderRightTitleSize","titleSize","useEffect","setClassName","AddNewTitleForm","newTitle","setNewTitle","setTitle","inputClassName","dataNameForStorage","defaultTitleValue","select","dataName","stateContent","localStorage","getItem","JSON","parse","statesName","setItem","stringify","callback","handleClick","current","contains","document","addEventListener","removeEventListener"],"mappings":"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","file":"bundle.06b53b3a92ba2f649497.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport useOutsideClick from \"../../helpers/useOutsideClick\";\r\nimport handleFocus from \"../../helpers/handleFocus\";\r\n\r\nfunction EditContactInfo(props) {\r\n    const ref = useRef();\r\n    const info = props.contactInfo;\r\n    const [formIsValid, setFormValidation] = useState(true);\r\n\r\n    const [phoneNum, setPhoneNum] = useState(info.phone);\r\n    const [email, setEmail] = useState(info.email);\r\n    const [website, setWebsite] = useState(info.website);\r\n    const [address, setAddress] = useState(info.address);\r\n\r\n    useOutsideClick(ref, ()=>{\r\n        props.setFormOpen(false);\r\n    });\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if ( formIsValid ) {\r\n            props.setContactInfo({\r\n                phone: phoneNum,\r\n                email: email,\r\n                website: website,\r\n                address: address\r\n            })\r\n            props.setFormOpen(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit } ref={ ref } className=\"header__contact-form\">\r\n            <h3 className=\"header__contact--title\">Contact me</h3>\r\n            <div onFocus={ handleFocus }\r\n                 className=\"header__contact-items\">\r\n                <InputField stateValue={ phoneNum } stateUpdater={ setPhoneNum }\r\n                            inputPattern=\"^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]*$\"\r\n                            inputTitle=\"Only numbers e.g 0201234567\"\r\n                            label='Phone number' id=\"phone\" inputType=\"text\"/>\r\n\r\n                <InputField stateValue={ email } stateUpdater={ setEmail }\r\n                            inputPattern=\"^(([-\\w\\d]+)(\\.[-\\w\\d]+)*@([-\\w\\d]+)(\\.[-\\w\\d]+)*(\\.([a-zA-Z]{2,5}|[\\d]{1,3})){1,2})$\"\r\n                            inputTitle=\"e.g test@test.com\"\r\n                            label='Email' id=\"email\" inputType=\"email\"/>\r\n\r\n                <InputField stateValue={ website } stateUpdater={ setWebsite }\r\n                            inputPattern=\"^(?:http(s)?:\\\\/\\\\/)?[\\\\w.-]+(?:\\\\.[\\\\w\\\\.-]+)+[\\\\w\\\\-\\\\._~:/?#[\\\\]@!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=.]+$\"\r\n                            inputTitle=\"Link to your social media site or website\"\r\n                            label='Website/Social Media' id=\"website\" inputType=\"text\"/>\r\n\r\n                <InputField stateValue={ address } stateUpdater={ setAddress } formIsValid={ setFormValidation }\r\n                            inputPattern=\"^.{1,50}$\"\r\n                            inputTitle=\"Only letters and numbers. e.g 123 Anywhere street, Any city, Country\"\r\n                            label='Address' id=\"address\" inputType=\"text\"/>\r\n            </div>\r\n            <button className=\"submit-btn\">+ Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nfunction InputField(props) {\r\n    const [newValue, setNewValue] = useState(props.stateValue);\r\n    const ref = useRef();\r\n\r\n    useOutsideClick(ref, ()=>{\r\n        props.stateUpdater(newValue);\r\n    });\r\n\r\n    return (\r\n        <div ref={ ref } className=\"header__contact-form-item\">\r\n            <label htmlFor={ props.id }>{ props.label }*</label>\r\n            <input\r\n                onChange={ (e)=>setNewValue(e.target.value) }\r\n                pattern={ props.inputPattern }\r\n                value={ newValue }\r\n                required={ true }\r\n                title={ props.inputTitle }\r\n                type={ props.inputType }\r\n                id={ props.id } name={ props.id }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditContactInfo","import React, { useState } from 'react';\r\n\r\nimport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage,\r\n} from '../../helpers/localStorage'\r\n\r\nimport EditContactInfo from \"./EditContactInfo\";\r\n\r\nconst defaultInfo = {\r\n    phone: '123-123-123',\r\n    email: 'testi@testi.com',\r\n    website: 'www.greatestsite.com',\r\n    address: '123 Anywhere Street, Any city, Country'\r\n}\r\n\r\nfunction ContactInfo(props) {\r\n    const [formOpen, setFormOpen] = useState(false);\r\n    const [contactInfo, setContactInfo] = useState('')\r\n\r\n    getItemsFromStorage('contactMeData', setContactInfo, defaultInfo);\r\n    setItemsToStorage('contactMeData', contactInfo);\r\n\r\n    if ( formOpen ) {\r\n        return <EditContactInfo setFormOpen={ setFormOpen } setContactInfo={ setContactInfo }\r\n                                contactInfo={ contactInfo }/>\r\n    } else {\r\n        return <RenderContactInfo globalEditingMode={ props.globalEditingMode } setFormOpen={ setFormOpen }\r\n                                  contactInfo={ contactInfo }/>\r\n    }\r\n}\r\n\r\nfunction RenderContactInfo(props) {\r\n    const info = props.contactInfo;\r\n\r\n    return (\r\n        <div onClick={ ()=>{\r\n            if ( props.globalEditingMode ) props.setFormOpen(true)\r\n        } }\r\n             className=\"header__contact head pointer\">\r\n            <h3 className=\"header__contact--title\">\r\n                Contact me\r\n                <span className=\"material-icons settings-icon header__icon list-btn\">settings</span>\r\n            </h3>\r\n            <InfoItem infoData={ info.phone } icon=\"call\"/>\r\n            <InfoItem infoData={ info.email } icon=\"alternate_email\"/>\r\n            <InfoItem infoData={ info.website } icon=\"language\"/>\r\n            <InfoItem infoData={ info.address } icon=\"home\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction InfoItem(props) {\r\n    return (\r\n        <div className=\"header__contact--item\">\r\n            <span className=\"material-icons contact\">{ props.icon }</span>\r\n            <p>{ props.infoData }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactInfo;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { getItemsFromStorage, setItemsToStorage } from \"../../helpers/localStorage\";\r\nimport useOutsideClick from \"../../helpers/useOutsideClick\";\r\nimport handleFocus from \"../../helpers/handleFocus\";\r\n\r\n\r\nfunction TitleSection(props) {\r\n    const [title, setTitle] = useState('');\r\n    const [formOpen, setFormOpen] = useState(false);\r\n    const [inputClassName, setClassName] = useState('');\r\n\r\n    getItemsFromStorage(props.dataNameForStorage, setTitle, props.defaultTitleValue);\r\n    setItemsToStorage(props.dataNameForStorage, title);\r\n\r\n    if ( !formOpen ) {\r\n        return (\r\n            <RenderRightTitleSize\r\n                globalEditingMode={ props.globalEditingMode }\r\n                titleSize={ props.titleSize }\r\n                setFormOpen={ setFormOpen }\r\n                title={ title }\r\n                setClassName={ setClassName }\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <AddNewTitleForm\r\n                formOpen={ formOpen }\r\n                setFormOpen={ setFormOpen }\r\n                title={ title }\r\n                setTitle={ setTitle }\r\n                inputClassName={ inputClassName }/>\r\n        )\r\n    }\r\n}\r\n\r\nfunction RenderRightTitleSize(props) {\r\n    if ( props.titleSize === 'paragraph' ) {\r\n        useEffect(()=>props.setClassName('header__job-form'))\r\n\r\n        return (\r\n            <p onClick={ ()=>{\r\n                if ( props.globalEditingMode ) {\r\n                    props.setFormOpen(true)\r\n                }\r\n            } }\r\n               className=\"head pointer\">\r\n                { props.title }\r\n                <span className=\"material-icons settings-icon header__icon list-btn\">settings</span>\r\n            </p>\r\n        )\r\n    } else if ( props.titleSize === 'h1' ) {\r\n        useEffect(()=>props.setClassName('header__full-name-form'));\r\n        return (\r\n            <h1 onClick={ ()=>{\r\n                if ( props.globalEditingMode ) {\r\n                    props.setFormOpen(true)\r\n                }\r\n            } }\r\n                className=\"head pointer\">\r\n                { props.title }\r\n                <span className=\"material-icons settings-icon header__icon list-btn\">settings</span>\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nfunction AddNewTitleForm(props) {\r\n    const [newTitle, setNewTitle] = useState(props.title);\r\n    const ref = useRef();\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if ( newTitle !== '' ) {\r\n            props.setTitle(newTitle)\r\n        }\r\n        setNewTitle('');\r\n        props.setFormOpen(false);\r\n    }\r\n\r\n    useOutsideClick(ref, ()=>{\r\n        props.setFormOpen(false);\r\n        props.setTitle(newTitle);\r\n    });\r\n\r\n    return (\r\n        <form ref={ ref } onSubmit={ handleSubmit }>\r\n            <input\r\n                onFocus={ handleFocus }\r\n                onChange={ (e)=>{\r\n                    setNewTitle(e.target.value);\r\n                } }\r\n                value={ newTitle }\r\n                className={ props.inputClassName }\r\n            />\r\n            <button className=\"submit-btn\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TitleSection;","import React from 'react';\r\nimport ContactInfo from \"./ContactInfo\";\r\nimport TitleSection from \"./TitleSection\";\r\n\r\nconst defaultJobTitle = 'Job title';\r\nconst defaultFullName = 'First and last name';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header className=\"header border\">\r\n            <div className=\"row\">\r\n                <div className=\"header__title\">\r\n                    <TitleSection\r\n                        globalEditingMode={props.globalEditingMode}\r\n                        dataNameForStorage='jobTitleData'\r\n                        defaultTitleValue={ defaultJobTitle }\r\n                        titleSize=\"paragraph\"/>\r\n                    <TitleSection\r\n                        globalEditingMode={props.globalEditingMode}\r\n                        dataNameForStorage='fullNameData'\r\n                        defaultTitleValue={ defaultFullName }\r\n                        titleSize=\"h1\"/>\r\n                </div>\r\n                <ContactInfo globalEditingMode={props.globalEditingMode}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","// When user starts editing any section, when input field is focused,\r\n// all of the text is selected\r\n\r\nfunction handleFocus (e) {\r\n    e.target.select();\r\n}\r\n\r\nexport default handleFocus\r\n","import {useEffect} from 'react';\r\n\r\n// If localStorage is empty, set state using stateUpdater with state content values\r\nfunction getItemsFromStorage(dataName, stateUpdater, stateContent) {\r\n    useEffect(() => {\r\n        if ( localStorage.getItem(dataName) ) {\r\n            stateUpdater(JSON.parse(localStorage.getItem(dataName)))\r\n        } else {\r\n            stateUpdater(stateContent)\r\n        }\r\n    }, [])\r\n}\r\n\r\n// If statesName changes, push that changed data to localStorage\r\nfunction setItemsToStorage(dataName, statesName) {\r\n    useEffect(() => {\r\n        localStorage.setItem(dataName, JSON.stringify(statesName))\r\n    }, [statesName])\r\n}\r\n\r\nexport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage,\r\n}","import {useEffect} from 'react';\r\n\r\n//assign the reference to any react component/element and use that to tell the hook what element you are referring to.\r\n// It will then check if the click event is outside that element and trigger the callback\r\nfunction useOutsideClick(ref, callback) {\r\n    const handleClick = e => {\r\n        if ( ref.current && !ref.current.contains(e.target) ) {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClick);\r\n        };\r\n    });\r\n}\r\n\r\nexport default useOutsideClick;"],"sourceRoot":""}
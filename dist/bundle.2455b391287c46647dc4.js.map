{"version":3,"sources":["webpack://cv-maker/./src/components/history/sectionHelpers.js","webpack://cv-maker/./src/components/history/HistorySection.js","webpack://cv-maker/./src/components/history/History.js","webpack://cv-maker/./src/helpers/localStorage.js","webpack://cv-maker/./src/helpers/openItemEditingForm.js","webpack://cv-maker/./src/helpers/updateState.js"],"names":["getHeaderObj","formType","title","company","type","btnName","getFormattedDate","date","dateArr","split","HistoryItemForm","lazy","RenderHistoryItems","props","obj","valueObj","item","startDate","endDate","description","editMode","id","formHeaders","Suspense","fallback","submitType","stateUpdater","setHistory","headers","key","HistoryItem","globalEditingMode","AddNewItem","addNewFormOpen","setWorkHistory","setForm","setAddNewFormOpen","Date","now","onClick","className","openItemEditingForm","useState","historyItemList","setHistoryItemList","getItemsFromStorage","dataNameForStorage","itemList","setItemsToStorage","mainHeader","map","defaultWorkHistory","defaultSchoolHistory","dataName","stateContent","useEffect","localStorage","getItem","JSON","parse","statesName","setItem","stringify","newState","updateState","targetId","newItem","targetIndex","prev","findIndex","e","index","removeItemFromList","filter"],"mappings":"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","file":"bundle.2455b391287c46647dc4.js","sourcesContent":["\r\nfunction getInputObj(obj) {\r\n    return {\r\n        title: obj.title,\r\n        company: obj.company,\r\n        startDate: obj.startDate,\r\n        endDate: obj.endDate,\r\n        description: obj.description,\r\n        editMode: obj.editMode,\r\n        id: obj.id\r\n    }\r\n}\r\n\r\n// These are add new history item forms labels. They change depending on type\r\nfunction getHeaderObj(formType) {\r\n    if ( formType === 'Work History' ) {\r\n        return {title: \"Job title\", company: \"Company name\", type: 'Job', btnName: 'Work'};\r\n    } else {\r\n        return {title: \"Schools/University's name\", company: \"Degree title\", type: \"Education\", btnName: 'Education'};\r\n    }\r\n}\r\n\r\nfunction getFormattedDate(type ,date) {\r\n    if(date === '') {\r\n        if(type === 'start') {\r\n            return '?'\r\n        } else {\r\n            return \"Still continues\";\r\n        }\r\n    } else {\r\n        let dateArr = date.split(\"-\");\r\n        return `${ dateArr[2] }/${ dateArr[1] }/${ dateArr[0] }`\r\n    }\r\n}\r\n\r\nexport {\r\n    getInputObj,\r\n    getHeaderObj,\r\n    getFormattedDate\r\n}","import React, { useState, lazy, Suspense } from 'react';\r\n\r\nconst HistoryItemForm = lazy(()=>import((`./HistoryItemForm`)))\r\n\r\nimport {\r\n    getInputObj,\r\n    getHeaderObj,\r\n    getFormattedDate\r\n} from './sectionHelpers'\r\n\r\nimport openItemEditingForm from \"../../helpers/openItemEditingForm\";\r\n\r\nimport { getItemsFromStorage, setItemsToStorage } from \"../../helpers/localStorage\";\r\n\r\n\r\nfunction HistorySection(props) {\r\n    const [addNewFormOpen, setAddNewFormOpen] = useState(false);\r\n    const [historyItemList, setHistoryItemList] = useState([]);\r\n\r\n    getItemsFromStorage(props.dataNameForStorage, setHistoryItemList, props.itemList);\r\n    setItemsToStorage(props.dataNameForStorage, historyItemList);\r\n\r\n\r\n    return (\r\n        <div className=\"border\">\r\n            <h2 className=\"history__title title\">{ props.mainHeader }</h2>\r\n            { historyItemList.map((item)=>{\r\n                return <RenderHistoryItems globalEditingMode={ props.globalEditingMode }\r\n                                           setHistory={ setHistoryItemList } item={ item }\r\n                                           formType={ props.mainHeader } key={ item.id }/>\r\n            }) }\r\n            <AddNewItem addNewFormOpen={ addNewFormOpen } setAddNewFormOpen={ setAddNewFormOpen }\r\n                        setWorkHistory={ setHistoryItemList } formType={ props.mainHeader }/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction RenderHistoryItems(props) {\r\n    const valueObj = getInputObj(props.item);\r\n    const formHeaders = getHeaderObj(props.formType);\r\n    // if items editing mode is on, return editing form, else return item itself\r\n    if ( props.item.editMode ) {\r\n        return (\r\n            <Suspense fallback={ <div>Loading...</div> }>\r\n                <HistoryItemForm submitType='Edit' stateUpdater={ props.setHistory } headers={ formHeaders }\r\n                                 valueObj={ valueObj } key={ valueObj.id }/>\r\n            </Suspense>\r\n        )\r\n\r\n    } else {\r\n        return <HistoryItem globalEditingMode={ props.globalEditingMode } stateUpdater={ props.setHistory }\r\n                            valueObj={ valueObj } key={ valueObj.id }/>\r\n    }\r\n}\r\n\r\nfunction AddNewItem(props) {\r\n    const formHeaders = getHeaderObj(props.formType);\r\n    const valueObj = {title: '', company: '', startDate: '', endDate: '', description: ''}\r\n\r\n    if ( props.addNewFormOpen ) {\r\n        return (\r\n            <Suspense fallback={ <div>Loading...</div> }>\r\n                <HistoryItemForm submitType='Add new' stateUpdater={ props.setWorkHistory } headers={ formHeaders }\r\n                                 valueObj={ valueObj } setForm={ props.setAddNewFormOpen } key={ Date.now() }/>\r\n            </Suspense>\r\n        )\r\n    } else {\r\n        return <button onClick={ ()=>props.setAddNewFormOpen(true) } className=\"btn\"\r\n                       key={ Date.now() }> + { formHeaders.btnName }</button>\r\n    }\r\n}\r\n\r\nfunction HistoryItem(props) {\r\n    let valueObj = props.valueObj;\r\n    return (\r\n        // When user clicks it, change items state so edit form opens up\r\n        <div onClick={ ()=>{\r\n            if ( props.globalEditingMode ) openItemEditingForm(valueObj, props.stateUpdater)\r\n        } }\r\n             className=\"pointer\">\r\n            <h3 className=\"history__item-title\"> { valueObj.title }\r\n                <span className=\"material-icons settings-icon list-btn\">settings</span>\r\n            </h3>\r\n            <h4 className=\"history__item-title\">{ valueObj.company }</h4>\r\n            <p>{ getFormattedDate('start', valueObj.startDate) } - { getFormattedDate('end', valueObj.endDate) }</p>\r\n            <p>{ valueObj.description }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default HistorySection;","import React from 'react';\r\n\r\nimport HistorySection from './HistorySection';\r\n\r\nconst defaultWorkHistory = [\r\n    {\r\n        title: 'Software engineer',\r\n        company: 'Supercell',\r\n        startDate: '2015-01-01',\r\n        endDate: '2020-01-01',\r\n        description: `Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi at atque beatae.\r\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi at atque beatae.`,\r\n        id: Date.now(),\r\n        editMode: false\r\n    },\r\n]\r\n\r\nconst defaultSchoolHistory = [\r\n    {\r\n        title: 'Bachelor of Software Engineering',\r\n        company: 'University of El Dorado',\r\n        startDate: '2015-01-01',\r\n        endDate: '2020-01-01',\r\n        description: `President, Computer and Technology Organization\r\n                    Vice President, Programming Club\r\n                    Member, Video Game Society\r\n                    Member, Student IT Helpdesk`,\r\n        id: Date.now(),\r\n        editMode: false,\r\n    },\r\n];\r\n\r\nfunction History(props) {\r\n    return (\r\n        <section className=\"main\">\r\n            <HistorySection globalEditingMode={ props.globalEditingMode } dataNameForStorage=\"workHistory\"\r\n                            itemList={ defaultWorkHistory } mainHeader=\"Work History\"/>\r\n            <HistorySection globalEditingMode={ props.globalEditingMode } dataNameForStorage=\"educationHistory\"\r\n                            itemList={ defaultSchoolHistory }\r\n                            mainHeader=\"Education\"/>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default History;","import {useEffect} from 'react';\r\n\r\n// If localStorage is empty, set state using stateUpdater with state content values\r\nfunction getItemsFromStorage(dataName, stateUpdater, stateContent) {\r\n    useEffect(() => {\r\n        if ( localStorage.getItem(dataName) ) {\r\n            stateUpdater(JSON.parse(localStorage.getItem(dataName)))\r\n        } else {\r\n            stateUpdater(stateContent)\r\n        }\r\n    }, [])\r\n}\r\n\r\n// If statesName changes, push that changed data to localStorage\r\nfunction setItemsToStorage(dataName, statesName) {\r\n    useEffect(() => {\r\n        localStorage.setItem(dataName, JSON.stringify(statesName))\r\n    }, [statesName])\r\n}\r\n\r\nexport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage,\r\n}","import { updateState } from \"./updateState\";\r\n\r\nfunction openItemEditingForm(obj, stateUpdater) {\r\n    let newState = obj;\r\n    newState.editMode = true;\r\n    updateState(stateUpdater, newState.id, newState)\r\n}\r\n\r\nexport default openItemEditingForm;","\r\n\r\nfunction updateState(stateUpdater, targetId, newItem) {\r\n    let targetIndex;\r\n    stateUpdater((prev) => {\r\n        targetIndex = prev.findIndex((e) => {\r\n            return e.id === targetId;\r\n        })\r\n        return prev.map((item, index) => index === targetIndex ? newItem : item);\r\n    })\r\n}\r\n\r\nfunction removeItemFromList(stateUpdater, targetId) {\r\n    stateUpdater((prev) => {\r\n        return prev.filter(item => item.id !== targetId)\r\n    })\r\n}\r\n\r\n\r\nexport {\r\n    updateState,\r\n    removeItemFromList,\r\n}"],"sourceRoot":""}
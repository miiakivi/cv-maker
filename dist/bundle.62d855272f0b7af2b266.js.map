{"version":3,"sources":["webpack://cv-maker/./src/components/sideBar/PersonalInfo.js","webpack://cv-maker/./src/components/sideBar/ListSection.js","webpack://cv-maker/./src/components/sideBar/Sidebar.js","webpack://cv-maker/./src/helpers/handleFocus.js","webpack://cv-maker/./src/helpers/localStorage.js","webpack://cv-maker/./src/helpers/openItemEditingForm.js","webpack://cv-maker/./src/helpers/updateState.js","webpack://cv-maker/./src/helpers/useOutsideClick.js"],"names":["defaultStateContent","description","editMode","RenderPersonalInfo","props","className","onClick","setPersonalInfo","obj","EditInfo","useState","editInfo","setEditInfo","ref","useRef","useOutsideClick","updateState","onSubmit","e","preventDefault","onChange","target","value","onFocus","handleFocus","name","id","cols","rows","personalInfo","getItemsFromStorage","setItemsToStorage","ListSectionForm","lazy","ListSection","listItems","setListItems","formOpen","setFormOpen","dataNameForStorage","sectionTitle","map","item","RenderListItems","itemType","stateUpdater","form","globalEditingMode","valueObj","key","btnName","Suspense","fallback","submitType","ListItem","openItemEditingForm","defaultListItems","select","dataName","stateContent","useEffect","localStorage","getItem","JSON","parse","statesName","setItem","stringify","newState","targetId","newItem","targetIndex","prev","findIndex","index","removeItemFromList","filter","callback","handleClick","current","contains","document","addEventListener","removeEventListener"],"mappings":"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","file":"bundle.62d855272f0b7af2b266.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage\r\n} from '/src/helpers/localStorage'\r\n\r\nimport useOutsideClick from \"../../helpers/useOutsideClick\";\r\nimport { updateState } from \"../../helpers/updateState\";\r\nimport handleFocus from \"../../helpers/handleFocus\";\r\n\r\nconst defaultStateContent = {\r\n    description: `A software engineer with hands-on experience in all levels of testing, including performance, functional, integration, system, and user acceptance.`,\r\n    editMode: false\r\n}\r\n\r\nfunction PersonalInfo() {\r\n    const [personalInfo, setPersonalInfo] = useState('');\r\n\r\n    getItemsFromStorage(\"personalInfoData\", setPersonalInfo, defaultStateContent)\r\n    setItemsToStorage(\"personalInfoData\", personalInfo);\r\n\r\n    if ( !personalInfo.editMode ) {\r\n        return <RenderPersonalInfo setPersonalInfo={ setPersonalInfo } description={ personalInfo.description }/>\r\n    } else {\r\n        return <EditInfo setPersonalInfo={ setPersonalInfo } description={ personalInfo.description }/>\r\n    }\r\n}\r\n\r\n\r\nfunction RenderPersonalInfo(props) {\r\n    function handleInfoEdit() {\r\n        props.setPersonalInfo((obj)=>{\r\n            return {description: obj.description, editMode: true}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"personal-info border\">\r\n            <h2 className=\"title\">Personal Profile</h2>\r\n            <p>{ props.description }</p>\r\n            <button\r\n                className=\"btn\"\r\n                onClick={ handleInfoEdit }>\r\n                + Info\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction EditInfo(props) {\r\n    const [editInfo, setEditInfo] = useState(props.description);\r\n    const ref = useRef();\r\n\r\n    function handleEditSubmit(e) {\r\n        e.preventDefault();\r\n        if ( editInfo !== '' ) {\r\n            props.setPersonalInfo({description: editInfo, editMode: false})\r\n        }\r\n    }\r\n\r\n    useOutsideClick(ref, ()=>{\r\n        updateState(props.setPersonalInfo({description: editInfo, editMode: false}));\r\n    });\r\n\r\n    return (\r\n        <form ref={ ref } className=\"personal-info border\"\r\n              onSubmit={ handleEditSubmit }>\r\n            <h2 className=\"title\">Personal Profile</h2>\r\n            <textarea\r\n                onChange={ (e)=>{\r\n                    setEditInfo(e.target.value);\r\n                } }\r\n                onFocus={ handleFocus }\r\n                className=\"personal-info__textarea\"\r\n                name=\"personal-info\"\r\n                id=\"personal-info\"\r\n                cols=\"30\" rows=\"10\"\r\n                value={ editInfo }\r\n            />\r\n            <button className=\"submit-btn\">Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default PersonalInfo;","import React, { useState, lazy, Suspense } from 'react';\r\n\r\nimport openItemEditingForm from \"../../helpers/openItemEditingForm\";\r\n\r\nimport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage,\r\n} from '/src/helpers/localStorage';\r\n\r\nconst ListSectionForm = lazy(()=>import(`./ListSectionForm`));\r\n\r\n\r\nfunction ListSection(props) {\r\n    const [listItems, setListItems] = useState([]);\r\n    const [formOpen, setFormOpen] = useState(false);\r\n\r\n    getItemsFromStorage(props.dataNameForStorage, setListItems, props.listItems);\r\n    setItemsToStorage(props.dataNameForStorage, listItems);\r\n\r\n    return (\r\n        <section className=\"list-section border\">\r\n            <h2 className=\"title\">{ props.sectionTitle }</h2>\r\n            <ul className=\"list-section__list\">\r\n                { listItems.map((item)=>{\r\n                    return <RenderListItems itemType=\"list\" stateUpdater={ setListItems } form={ formOpen }\r\n                                            setFormOpen={ setFormOpen } globalEditingMode={ props.globalEditingMode }\r\n                                            valueObj={ item } key={ item.id }/>\r\n                }) }\r\n            </ul>\r\n            <RenderListItems globalEditingMode={ props.globalEditingMode } itemType=\"form\" stateUpdater={ setListItems }\r\n                             form={ formOpen }\r\n                             setFormOpen={ setFormOpen }\r\n                             btnName={ props.btnName }/>\r\n        </section>)\r\n}\r\n\r\nfunction RenderListItems(props) {\r\n    if ( props.itemType === 'list' ) {\r\n        // If items edit mode is on, return editing form, else return li element\r\n        if ( props.valueObj.editMode ) {\r\n            return (\r\n                <Suspense fallback={ <div>Loading...</div> }>\r\n                    <ListSectionForm submitType=\"Edit\" valueObj={ props.valueObj } formOpen={ props.formOpen }\r\n                                     stateUpdater={ props.stateUpdater }/>\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return <ListItem globalEditingMode={ props.globalEditingMode } stateUpdater={ props.stateUpdater }\r\n                             valueObj={ props.valueObj }/>\r\n        }\r\n    } else if ( props.itemType === 'form' ) {\r\n        if ( props.form ) {\r\n            let obj = {name: 'Add new'}\r\n            return (\r\n                <Suspense fallback={ <div>Loading...</div> }>\r\n                    <ListSectionForm submitType=\"Add new\" valueObj={ obj } formOpen={ props.setFormOpen }\r\n                                     stateUpdater={ props.stateUpdater }/>\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return <button onClick={ ()=>props.setFormOpen(true) } className=\"btn\">+ { props.btnName }</button>\r\n        }\r\n    }\r\n}\r\n\r\n// The global editing mode doesnt work in this section. When editing mode is ON click event doesnt work\r\nfunction ListItem(props) {\r\n    return (\r\n        <div onClick={ ()=>{\r\n            if ( props.globalEditingMode ) {\r\n                openItemEditingForm(props.valueObj, props.stateUpdater);\r\n            }\r\n        } } className=\"list-section__list-cont\">\r\n            <span className=\"material-icons list-section__dot\">fiber_manual_record</span>\r\n            <li\r\n                className=\"list-section__item pointer\">\r\n                { props.valueObj.name }\r\n                <span className=\"material-icons settings-icon\">settings</span>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { ListSection }\r\n","import React from 'react';\r\n\r\nimport PersonalInfo from './PersonalInfo';\r\nimport { ListSection } from './ListSection';\r\n\r\n\r\nconst defaultListItems = [\r\n    {name: 'lorem impsum for dorom amet', editMode: false, id: 1234566},\r\n    {name: 'lorem impsum for dorom amet', editMode: false, id: 1244555},\r\n    {name: 'lorem impsum for dorom amet', editMode: false, id: 1222222},\r\n    {name: 'lorem impscxcxum for dorom amet', editMode: false, id: 1224522},\r\n];\r\n\r\nfunction Sidebar(props) {\r\n    return (\r\n        <aside className=\"sidebar\">\r\n            <PersonalInfo/>\r\n            <ListSection\r\n                globalEditingMode={props.globalEditingMode}\r\n                listItems={defaultListItems}\r\n                dataNameForStorage='skillsItemData'\r\n                sectionTitle='Skills'\r\n                btnName='Skill'\r\n            />\r\n            <ListSection\r\n                globalEditingMode={props.globalEditingMode}\r\n                listItems={defaultListItems}\r\n                dataNameForStorage='goalItemData'\r\n                sectionTitle='Goals in Life'\r\n                btnName='Goal'\r\n            />\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","// When user starts editing any section, when input field is focused,\r\n// all of the text is selected\r\n\r\nfunction handleFocus (e) {\r\n    e.target.select();\r\n}\r\n\r\nexport default handleFocus\r\n","import {useEffect} from 'react';\r\n\r\n// If localStorage is empty, set state using stateUpdater with state content values\r\nfunction getItemsFromStorage(dataName, stateUpdater, stateContent) {\r\n    useEffect(() => {\r\n        if ( localStorage.getItem(dataName) ) {\r\n            stateUpdater(JSON.parse(localStorage.getItem(dataName)))\r\n        } else {\r\n            stateUpdater(stateContent)\r\n        }\r\n    }, [])\r\n}\r\n\r\n// If statesName changes, push that changed data to localStorage\r\nfunction setItemsToStorage(dataName, statesName) {\r\n    useEffect(() => {\r\n        localStorage.setItem(dataName, JSON.stringify(statesName))\r\n    }, [statesName])\r\n}\r\n\r\nexport {\r\n    setItemsToStorage,\r\n    getItemsFromStorage,\r\n}","import { updateState } from \"./updateState\";\r\n\r\nfunction openItemEditingForm(obj, stateUpdater) {\r\n    let newState = obj;\r\n    newState.editMode = true;\r\n    updateState(stateUpdater, newState.id, newState)\r\n}\r\n\r\nexport default openItemEditingForm;","\r\n\r\nfunction updateState(stateUpdater, targetId, newItem) {\r\n    let targetIndex;\r\n    stateUpdater((prev) => {\r\n        targetIndex = prev.findIndex((e) => {\r\n            return e.id === targetId;\r\n        })\r\n        return prev.map((item, index) => index === targetIndex ? newItem : item);\r\n    })\r\n}\r\n\r\nfunction removeItemFromList(stateUpdater, targetId) {\r\n    stateUpdater((prev) => {\r\n        return prev.filter(item => item.id !== targetId)\r\n    })\r\n}\r\n\r\n\r\nexport {\r\n    updateState,\r\n    removeItemFromList,\r\n}","import {useEffect} from 'react';\r\n\r\n//assign the reference to any react component/element and use that to tell the hook what element you are referring to.\r\n// It will then check if the click event is outside that element and trigger the callback\r\nfunction useOutsideClick(ref, callback) {\r\n    const handleClick = e => {\r\n        if ( ref.current && !ref.current.contains(e.target) ) {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClick);\r\n        };\r\n    });\r\n}\r\n\r\nexport default useOutsideClick;"],"sourceRoot":""}
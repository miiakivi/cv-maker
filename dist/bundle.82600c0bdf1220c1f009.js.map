{"version":3,"sources":["webpack://cv-maker/./src/components/formComponents/FormButtons.js","webpack://cv-maker/./src/components/formComponents/FormItem.js","webpack://cv-maker/./src/components/history/FormContent.js","webpack://cv-maker/./src/components/history/HistoryItemForm.js","webpack://cv-maker/./src/helpers/handleFocus.js","webpack://cv-maker/./src/helpers/useOutsideClick.js"],"names":["props","submitType","className","onClick","edit","removeItemFromList","stateUpdater","id","add","htmlFor","label","onChange","e","target","value","onFocus","handleFocus","stateValue","name","type","inputType","required","inputRequired","headers","stateObj","FormItem","title","setTitle","company","setCompany","startDate","setStartDate","endDate","setEndDate","setDescription","description","cols","rows","valueObj","ref","useRef","useState","editOldItem","updateState","editMode","useOutsideClick","setForm","FormButtons","prev","Date","now","select","callback","handleClick","current","contains","useEffect","document","addEventListener","removeEventListener"],"mappings":"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","file":"bundle.82600c0bdf1220c1f009.js","sourcesContent":["import { removeItemFromList } from \"../../helpers/updateState\";\r\nimport React from \"react\";\r\n\r\nfunction FormButtons(props) {\r\n    if ( props.submitType === 'Edit' ) {\r\n        return (\r\n            <div className=\"row list-section__btn-container\">\r\n                <button onClick={ props.edit } className=\"submit-btn\">\r\n                    Submit\r\n                </button>\r\n                <button onClick={ ()=>removeItemFromList(props.stateUpdater, props.id) }\r\n                        className=\"delete-btn\">\r\n                    Delete\r\n                </button>\r\n            </div>\r\n        )\r\n    } else if ( props.submitType === 'Add new' ) {\r\n        return <button onClick={ props.add } className=\"submit-btn\">Submit</button>\r\n    }\r\n}\r\n\r\nexport default FormButtons","import React from \"react\";\r\nimport handleFocus from \"../../helpers/handleFocus\";\r\n\r\nfunction FormItem(props) {\r\n    return (\r\n        <div className=\"form__item\">\r\n            <label htmlFor={ props.id }>{ props.label }</label>\r\n            <input onChange={ (e)=>props.stateUpdater(e.target.value) }\r\n                   onFocus={ handleFocus } value={ props.stateValue }\r\n                   name={ props.id } id={ props.id } type={ props.inputType } required={ props.inputRequired }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormItem;","import React from \"react\";\r\nimport FormItem from \"../formComponents/FormItem\";\r\nimport handleFocus from \"../../helpers/handleFocus\";\r\n\r\nfunction FormContent(props) {\r\n    const headers = props.headers;\r\n    const stateObj = props.stateObj;\r\n\r\n    return (\r\n        <>\r\n            <FormItem id=\"title\" stateValue={ stateObj.title } label={ headers.title }\r\n                      stateUpdater={ stateObj.setTitle } inputType=\"text\" inputRequired={ true }/>\r\n            <FormItem id=\"company\" stateValue={ stateObj.company } label={ headers.company }\r\n                      stateUpdater={ stateObj.setCompany } inputType=\"text\" inputRequired={ true }/>\r\n            <div className=\"form__date-cont\">\r\n                <FormItem id=\"start-date\" stateValue={ stateObj.startDate } label=\"Starting Date\"\r\n                          stateUpdater={ stateObj.setStartDate } inputType=\"date\" inputRequired={ true }/>\r\n                <FormItem id=\"end-date\" stateValue={ stateObj.endDate } label=\"End Date\"\r\n                          stateUpdater={ stateObj.setEndDate } inputType=\"date\" inputRequired={ false }/>\r\n            </div>\r\n            <div className=\"form__item\">\r\n                <label htmlFor=\"description\">{ headers.type } description</label>\r\n                <textarea\r\n                    onChange={ (e)=>stateObj.setDescription(e.target.value) }\r\n                    onFocus={ handleFocus } value={ stateObj.description }\r\n                    name=\"description\"\r\n                    id=\"description\"\r\n                    cols=\"30\" rows=\"5\"\r\n                    required={ true }\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormContent;","import React, { useRef, useState } from 'react';\r\nimport FormContent from \"./FormContent\";\r\nimport { updateState } from \"../../helpers/updateState\";\r\nimport useOutsideClick from \"../../helpers/useOutsideClick\";\r\nimport FormButtons from \"../formComponents/FormButtons\";\r\n\r\n\r\nfunction HistoryItemForm(props) {\r\n    const valueObj = props.valueObj;\r\n    const ref = useRef();\r\n\r\n    const [title, setTitle] = useState(valueObj.title);\r\n    const [company, setCompany] = useState(valueObj.company);\r\n    const [startDate, setStartDate] = useState(valueObj.startDate);\r\n    const [endDate, setEndDate] = useState(valueObj.endDate);\r\n    const [description, setDescription] = useState(valueObj.description);\r\n\r\n    const stateObj = {\r\n        title,\r\n        setTitle,\r\n        company,\r\n        setCompany,\r\n        startDate,\r\n        setStartDate,\r\n        endDate,\r\n        setEndDate,\r\n        description,\r\n        setDescription\r\n    };\r\n\r\n    function editOldItem() {\r\n        updateState(props.stateUpdater, valueObj.id, {\r\n            title,\r\n            company,\r\n            startDate,\r\n            endDate,\r\n            description,\r\n            id: valueObj.id,\r\n            editMode: false\r\n        });\r\n    }\r\n\r\n    function addNewItem() {\r\n        if ( title !== '' && company !== '' && description !== '' ) {\r\n            props.stateUpdater((prev)=>{\r\n                return [...prev, {title, company, startDate, endDate, description, editMode: false, id: Date.now()}]\r\n            })\r\n            props.setForm(false);\r\n        }\r\n    }\r\n\r\n    useOutsideClick(ref, ()=>{\r\n        if ( props.submitType === 'Edit' ) {\r\n            editOldItem();\r\n        } else if ( props.submitType === 'Add new' ) {\r\n            props.setForm(false);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <form ref={ ref } className=\"form\">\r\n                <h4>{ props.submitType }</h4>\r\n                <FormContent stateObj={ stateObj } headers={ props.headers }/>\r\n                <FormButtons stateUpdater={ props.stateUpdater } submitType={ props.submitType }\r\n                             edit={ editOldItem }\r\n                             add={ addNewItem } id={ valueObj.id }/>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HistoryItemForm;","// When user starts editing any section, when input field is focused,\r\n// all of the text is selected\r\n\r\nfunction handleFocus (e) {\r\n    e.target.select();\r\n}\r\n\r\nexport default handleFocus\r\n","import {useEffect} from 'react';\r\n\r\n//assign the reference to any react component/element and use that to tell the hook what element you are referring to.\r\n// It will then check if the click event is outside that element and trigger the callback\r\nfunction useOutsideClick(ref, callback) {\r\n    const handleClick = e => {\r\n        if ( ref.current && !ref.current.contains(e.target) ) {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"click\", handleClick);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"click\", handleClick);\r\n        };\r\n    });\r\n}\r\n\r\nexport default useOutsideClick;"],"sourceRoot":""}